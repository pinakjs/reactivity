(function(o,i){typeof exports=="object"&&typeof module<"u"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(o=typeof globalThis<"u"?globalThis:o||self,i(o.reactivity={}))})(this,function(o){"use strict";const i=(e,t,n,c=!1)=>Object.defineProperty(e,t,{value:n,enumerable:!1,writable:c}),u=e=>typeof e=="function",b=e=>typeof e=="boolean",w=()=>!1,m=(e,t)=>e===t;/**
 * @repup/reactivity - A lightweight, smaller javascript reactivity system.
 * 
 * @author Anuj Kumar <thestackmastery@gmail.com>
 * @link https://github.com/thestackmastery/reactivity
 * @license MIT https://github.com/thestackmastery/reactivity/LICENSE
 * @version 1.0.0
 */let y=0,r=null;const E=(e,t=m)=>{if(!b(t)&&!u(t))throw new TypeError("Second parameter of `createSignal()` must be boolean value or a function which evaluate to boolean value.");const n=i(i({},1,2,!0),0,y++),c=b(t)?w:t;return[()=>(r&&(r[n[0]]=n),e),d=>{const f=u(d)?d(e):d;c(e,f)||(e=f,p(n))}]},v=(e,t)=>{if(!u(e))throw new Error("Second parameter of `observeSignal()` must be a function.");if(t!==void 0&&!u(e))throw new Error("Third parameter of `observeSignal()` is optional, but if used it must be a function.");const n=[];r={};const c=(t||e)();let S,a;for(S in r)a=r[S],a[a[1]]=e,n.push([a,a[1]++]);return r=null,n.length?[c,()=>{let f;for(f of n)delete f[0][f[1]]}]:[c,w]},N=e=>{if(!u(e))throw new Error("First parameter of `untrackSignal()` must be a function.");if(!r)return e();const t=r;r=null;const n=e();return r=t,n},T=u(queueMicrotask)?queueMicrotask:Promise.resolve().then;let s={},l={},h=!1,k=3,_={},p;const F=p=e=>{s[e[0]]||(s[e[0]]=!0,_[e[0]]=e,h||(h=!0,T(O)))},M=e=>{s[e[0]]||(s[e[0]]=!0,g(e))},O=()=>{let e,t=k;for(;t-- >0;)for(e in _)g(_[e]),delete _[e];s={},l={},h=!1},g=e=>{let t;for(t in e)l[t]||(l[t]=!0,e[t]())},R=e=>{if(!u(e))throw new TypeError("First parameter of `withoutBatch()` must be a function.");p=M,e(),p=F,h||(l={},s={})};o.createSignal=E,o.observeSignal=v,o.untrackSignal=N,o.withoutBatch=R,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
